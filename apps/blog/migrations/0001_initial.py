# Generated by Django 4.2.7 on 2025-06-23 20:15

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("taggit", "0005_auto_20220424_2025"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "color",
                    models.CharField(
                        default="#1e3c72", help_text="Hex color code", max_length=7
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        default="fas fa-folder",
                        help_text="FontAwesome icon class",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Blog Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, max_length=200, unique=True)),
                (
                    "excerpt",
                    models.TextField(
                        help_text="Brief description shown in listings", max_length=500
                    ),
                ),
                ("content", ckeditor_uploader.fields.RichTextUploadingField()),
                (
                    "featured_image",
                    models.ImageField(blank=True, null=True, upload_to="blog/images/"),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank to use post title",
                        max_length=60,
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank to use excerpt",
                        max_length=160,
                    ),
                ),
                ("meta_keywords", models.CharField(blank=True, max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=10,
                    ),
                ),
                (
                    "featured",
                    models.CharField(
                        choices=[
                            ("none", "Not Featured"),
                            ("hero", "Hero Featured"),
                            ("sidebar", "Sidebar Featured"),
                            ("grid", "Grid Featured"),
                        ],
                        default="none",
                        max_length=10,
                    ),
                ),
                (
                    "is_sticky",
                    models.BooleanField(
                        default=False, help_text="Pin to top of listings"
                    ),
                ),
                ("allow_comments", models.BooleanField(default=True)),
                ("view_count", models.PositiveIntegerField(default=0)),
                (
                    "read_time",
                    models.PositiveIntegerField(
                        default=0, help_text="Estimated read time in minutes"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="blog.blogcategory",
                    ),
                ),
                (
                    "related_posts",
                    models.ManyToManyField(blank=True, to="blog.blogpost"),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "ordering": ["-is_sticky", "-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogSubscriber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("subscribed_at", models.DateTimeField(auto_now_add=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-subscribed_at"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "email"],
                        name="blog_blogsu_is_acti_dd7a8c_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("author_name", models.CharField(max_length=100)),
                ("author_email", models.EmailField(max_length=254)),
                ("author_website", models.URLField(blank=True)),
                ("content", models.TextField()),
                ("is_approved", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="blog.blogpost",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReadingHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(max_length=40)),
                ("read_at", models.DateTimeField(auto_now_add=True)),
                (
                    "time_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent reading in seconds"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="blog.blogpost"
                    ),
                ),
            ],
            options={
                "ordering": ["-read_at"],
                "indexes": [
                    models.Index(
                        fields=["session_key", "read_at"],
                        name="blog_readin_session_c254fc_idx",
                    ),
                    models.Index(
                        fields=["post", "read_at"],
                        name="blog_readin_post_id_98fdd2_idx",
                    ),
                ],
                "unique_together": {("session_key", "post")},
            },
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["status", "published_at"], name="blog_blogpo_status_aa5436_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["category", "status"], name="blog_blogpo_categor_2e8dab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["featured", "status"], name="blog_blogpo_feature_ddc23d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogcomment",
            index=models.Index(
                fields=["post", "is_approved"], name="blog_blogco_post_id_781ab9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogcomment",
            index=models.Index(
                fields=["is_approved", "created_at"],
                name="blog_blogco_is_appr_7e1f6f_idx",
            ),
        ),
    ]
